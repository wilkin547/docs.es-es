### YamlMime:Tutorial
title: Obtenga información sobre cómo administrar colecciones de datos mediante el tipo de lista genérico
metadata:
  title: 'Colección de datos: tutorial interactivo de introducción a C#'
  description: En este tutorial, usará el explorador para aprender a usar C# de forma interactiva. Escriba código de C# y vea los resultados de la compilación y la ejecución del código directamente en el explorador.
  audience: Developer
  ms.custom: mvc
  ms.topic: interactive-tutorial
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 26fded8a82771672825825ce5d617ef200f18542
  ms.sourcegitcommit: f0fc5db7bcbf212e46933e9cf2d555bb82666141
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 02/17/2021
  ms.locfileid: "100626665"
items:
- durationInMinutes: 1
  content: >
    En este tutorial se enseña a usar C# de forma interactiva, con el uso del explorador para escribir código de C# y ver los resultados de la compilación y ejecución del código. Contiene una serie de lecciones en las que se crean, modifican y examinan colecciones y matrices.
- title: Creación de listas
  durationInMinutes: 2
  content: >
    Ejecute el código siguiente en la ventana interactiva. Seleccione el botón **Entrar en el modo de enfoque**. A continuación, escriba el bloque de código siguiente en la ventana interactiva (reemplace `<name>` por su nombre) y seleccione **Ejecutar**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Si está ejecutando esto en su entorno, en su lugar debe seguir las instrucciones de la [versión local](arrays-and-collections.md).


    Ha creado una lista de cadenas, ha agregado tres nombres a esa lista y ha impreso los nombres en MAYÚSCULA. Los conceptos aplicados ya se han aprendido en los tutoriales anteriores para recorrer en bucle la lista.


    El código para mostrar los nombres usa la característica [interpolación de cadenas](../../language-reference/tokens/interpolated.md). Si un valor de `string` va precedido del carácter `$`, significa que puede insertar código de C# en la declaración de cadena. La cadena real reemplaza a ese código de C# con el valor que genera. En este ejemplo, reemplaza `{name.ToUpper()}` con cada nombre, convertido a mayúsculas, porque se llama al método <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    Vamos a continuar indagando.
- title: Modificación del contenido de las listas
  durationInMinutes: 3
  content: >
    La colección creada usa el tipo <xref:System.Collections.Generic.List%601>. Este tipo almacena las secuencias de elementos. Especifique el tipo de los elementos entre corchetes angulares.


    Un aspecto importante de este tipo <xref:System.Collections.Generic.List%601> es que se puede aumentar o reducir, lo que permite agregar o quitar elementos. Puede ver los resultados si modifica el contenido una vez mostrado. Agregue el código siguiente debajo del código que ya ha escrito (debajo del bucle que imprime el contenido):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Se han agregado dos nombres más al final de la lista. También se ha quitado uno. La salida de este bloque de código muestra el contenido inicial y luego imprime una línea en blanco y el nuevo contenido.


    <xref:System.Collections.Generic.List%601> también permite hacer referencia a elementos individuales a través del **índice**. Puede acceder a los elementos con los tokens `[` y `]`. Agregue el código siguiente debajo del que ya haya escrito y pruébelo:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    No puede acceder a elementos que estén más allá del final de la lista. Puede comprobar durante cuánto tiempo la lista usa la propiedad <xref:System.Collections.Generic.List%601.Count%2A>. Agregue el código siguiente para probarlo:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Vuelva a seleccionar **Ejecutar** para ver los resultados. En C#, los índices empiezan en 0, por lo que el índice más grande válido es uno menos que el número de elementos de la lista.
- title: Búsqueda y orden en las listas
  durationInMinutes: 5
  content: >
    En los ejemplos se usan listas relativamente pequeñas, pero las aplicaciones a menudo pueden crear listas que contengan muchos más elementos, en ocasiones, con una numeración que engloba millares. Para encontrar elementos en estas colecciones más grandes, debe buscar diferentes elementos en la lista. El método <xref:System.Collections.Generic.List%601.IndexOf%2A> busca un elemento y devuelve su índice. Si el elemento no está en la lista, `IndexOf` devuelve `-1`. Pruébelo para ver cómo funciona.  Agregue el código siguiente debajo del que ha escrito hasta ahora:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");

    Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");

    ```


    No puede saber si un elemento está en la lista, por lo que debe comprobar siempre el índice devuelto por <xref:System.Collections.Generic.List%601.IndexOf%2A>. Si es `-1`, significa que no se ha encontrado el elemento.


    Los elementos de la lista también se pueden ordenar. El método <xref:System.Collections.Generic.List%601.Sort%2A> clasifica todos los elementos de la lista en su orden normal (por orden alfabético si se trata de cadenas). Agregue este código y vuelva a ejecutarlo:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Listas de otros tipos
  durationInMinutes: 5
  content: >
    Hasta el momento, se ha usado el tipo `string` en las listas. Se va a crear una lista <xref:System.Collections.Generic.List%601> con un tipo distinto. Se va a crear una serie de números. Elimine el código que ha escrito hasta ahora y reemplácelo por este:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Se crea una lista de enteros y se definen los dos primeros enteros con el valor 1. La *secuencia Fibonacci*, una secuencia de números, empieza con dos 1. Cada número sucesivo de Fibonacci se obtiene con la suma de los dos números anteriores. Agregue este código:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Presione **Ejecutar** para ver los resultados.
- title: Desafío
  durationInMinutes: 10
  content: >
    Trate de recopilar los conceptos que ha aprendido en esta lección y en las anteriores. Amplíe lo que ha creado hasta el momento con los números de Fibonacci. Pruebe y escriba el código para generar los veinte primeros números de la secuencia. (Como sugerencia, el 20º número de la serie de Fibonacci es 6765).
- title: Desafío completo
  durationInMinutes: 3
  content: >
    ¿Ha obtenido algo parecido a lo siguiente?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Con cada iteración del bucle, se obtienen los dos últimos enteros de la lista, se suman y se agrega el valor resultante a la lista. El bucle se repite hasta que se hayan agregado veinte elementos a la lista.
- content: >-
    Ha completado el tutorial interactivo de la lista. Se trata de la introducción final al tutorial interactivo de C#. Puede visitar el [sitio .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para descargar el SDK de .NET Core, crear un proyecto en el equipo y seguir programando. La sección "Pasos siguientes" le lleva de vuelta a estos tutoriales.


    Puede obtener más información sobre las [colecciones de .NET](../../../standard/collections/index.md) en los siguientes artículos:

    - [Selección de un tipo de colección](../../../standard/collections/selecting-a-collection-class.md)

    - [Tipos de colección utilizados normalmente](../../../standard/collections/commonly-used-collection-types.md)

    - [Cuándo utilizar colecciones genéricas](../../../standard/collections/when-to-use-generic-collections.md)
